name: win_lin

on:
  push:
    branches: [ "main" ]

permissions: read-all

jobs:
  set-version:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
        check-latest: true
  
    - name: STAGE gen version
      working-directory: ./scripts
      run: bash "version.gen.sh"

    - uses: actions/upload-artifact@v3
      with:
        name: version
        path: ./src/version.txt
  
  build-lin:
    needs: [set-version]
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
        check-latest: true

    - name: STAGE pip upgrade
      run: python -m pip install --upgrade pip

    - name: STAGE requirements
      run: pip install -r requirements.txt

    - name: Download version artifact
      uses: actions/download-artifact@v3
      with:
        name: version
        path: ./src
        
    - name: STAGE strip bins
      run: find $pythonLocation -name *.so* -type f -exec strip {} \;
    
    - name: STAGE run Nuitka
      working-directory: ./scripts
      run: bash "nuitka.run.sh"
    
    - uses: actions/upload-artifact@v3
      with:
        name: dude-lin
        path: dude
        
  build-win:
    needs: [set-version]
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
        check-latest: true

    - name: STAGE pip upgrade
      run: python -m pip install --upgrade pip

    - name: STAGE requirements
      run: pip install -r requirements.txt
    
    - name: Download version artifact
      id: version
      uses: actions/download-artifact@v3
      with:
        name: version
        path: ./src
    
    - name: STAGE run Nuitka
      working-directory: ./scripts
      run: "nuitka.run.bat"
      shell: cmd

    - uses: actions/upload-artifact@v3
      with:
        name: dude-win
        path: |
          dude.exe
          dudegui.exe

  release:
    permissions: write-all
    runs-on: ubuntu-20.04
    needs: [build-lin, build-win]
    
    steps:
    - name: Download version artifact
      uses: actions/download-artifact@v3
      with:
        name: version
        path: ./src

    - name: Download linux build
      uses: actions/download-artifact@v3
      with:
        name: dude-lin
        path: ./

    - name: chmod
      run: chmod 777 ./dude

    - name: Download windows build
      uses: actions/download-artifact@v3
      with:
        name: dude-win
        path: ./
    
    - name: Read version
      id: version
      run: echo "version=$(cat ./src/version.txt)" 

    - name: Create release tag
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          This is the release of version ${{ steps.version.outputs.version }}
        draft: false
        prerelease: true

    - name: Upload release lin
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dude
        asset_name: dude-${{ steps.version.outputs.version }}
        asset_content_type: application/octet-stream
        
    - name: Upload release win
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: |
          dude.exe
          dudegui.exe
        asset_name: dude-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
